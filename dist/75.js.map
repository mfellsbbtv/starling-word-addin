{"version":3,"file":"75.js","mappings":"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","sources":["webpack://starling-word-addin/./src/taskpane/services/contract-reviewer.js"],"sourcesContent":["// Contract Review and Revision Service\n// Analyzes contracts against playbook standards and automatically revises non-acceptable clauses\n\nexport class ContractReviewer {\n  constructor() {\n    this.playbookService = null;\n    this.currentReview = null;\n  }\n\n  /**\n   * Initialize the reviewer with playbook service\n   */\n  async initialize() {\n    if (!this.playbookService) {\n      const { playbookService } = await import('../../shared/playbook-service.js');\n      this.playbookService = playbookService;\n    }\n  }\n\n  /**\n   * Comprehensive contract review workflow\n   * @param {string} contractText - The contract text to review\n   * @param {string} agreementType - Type of agreement (e.g., 'content-management')\n   * @param {string} contentType - Content type (e.g., 'music', 'non-music')\n   * @returns {Promise<Object>} Complete review results with revision recommendations\n   */\n  async reviewContract(contractText, agreementType, contentType) {\n    await this.initialize();\n    \n    console.log(`Starting comprehensive review for ${agreementType}-${contentType}`);\n    \n    // Step 1: Parse contract structure\n    const contractStructure = await this.parseContractStructure(contractText);\n    \n    // Step 2: Load playbook standards\n    const playbook = await this.playbookService.loadPlaybook(agreementType, contentType);\n    \n    // Step 3: Analyze against playbook standards\n    const complianceAnalysis = await this.analyzeCompliance(contractStructure, playbook);\n    \n    // Step 4: Identify non-acceptable clauses\n    const nonAcceptableClauses = this.identifyNonAcceptableClauses(complianceAnalysis);\n    \n    // Step 5: Generate revision recommendations\n    const revisionPlan = await this.generateRevisionPlan(nonAcceptableClauses, playbook);\n    \n    // Step 6: Calculate overall acceptability\n    const acceptabilityStatus = this.calculateAcceptabilityStatus(complianceAnalysis, revisionPlan);\n    \n    this.currentReview = {\n      contractStructure,\n      complianceAnalysis,\n      nonAcceptableClauses,\n      revisionPlan,\n      acceptabilityStatus,\n      playbook,\n      reviewTimestamp: new Date().toISOString(),\n      clauseBreakdown: this.generateClauseBreakdown(contractStructure)\n    };\n\n    return this.currentReview;\n  }\n\n  /**\n   * Parse contract into structured format for analysis\n   */\n  async parseContractStructure(contractText) {\n    const { parseContractStructure } = await import('./contract-parser.js');\n    const structure = parseContractStructure(contractText);\n\n    // Enhance with clause identification\n    structure.articles.forEach((article, articleIndex) => {\n      article.articleNumber = articleIndex + 1;\n      article.clauses.forEach((clause, clauseIndex) => {\n        clause.clauseNumber = `${article.articleNumber}.${clauseIndex + 1}`;\n        clause.clauseType = this.identifyClauseType(clause.text);\n        clause.keywords = this.extractKeywords(clause.text);\n        clause.riskLevel = 'unknown';\n        clause.complianceStatus = 'pending';\n        clause.needsModification = false;\n        clause.recommendedText = null;\n        clause.changeReason = null;\n      });\n    });\n\n    return structure;\n  }\n\n  /**\n   * Analyze contract compliance against playbook standards\n   */\n  async analyzeCompliance(contractStructure, playbook) {\n    const analysis = {\n      overallScore: 0,\n      clauseAnalysis: [],\n      missingClauses: [],\n      problematicClauses: [],\n      acceptableClauses: []\n    };\n    \n    const standardClauses = playbook.clauses?.clauses || [];\n    const riskRules = playbook.riskRules?.risk_rules || [];\n    \n    // Analyze each clause in the contract\n    for (const article of contractStructure.articles) {\n      for (const clause of article.clauses) {\n        const clauseAnalysis = await this.analyzeClause(clause, standardClauses, riskRules);\n        analysis.clauseAnalysis.push(clauseAnalysis);\n        \n        // Categorize clause based on analysis\n        if (clauseAnalysis.complianceStatus === 'non-acceptable') {\n          analysis.problematicClauses.push(clauseAnalysis);\n        } else if (clauseAnalysis.complianceStatus === 'acceptable') {\n          analysis.acceptableClauses.push(clauseAnalysis);\n        }\n      }\n    }\n    \n    // Check for missing essential clauses\n    analysis.missingClauses = this.findMissingClauses(contractStructure, standardClauses);\n    \n    // Calculate overall compliance score\n    analysis.overallScore = this.calculateComplianceScore(analysis);\n    \n    return analysis;\n  }\n\n  /**\n   * Analyze individual clause against standards\n   */\n  async analyzeClause(clause, standardClauses, riskRules) {\n    const analysis = {\n      clauseId: clause.clauseNumber,\n      clauseText: clause.text,\n      clauseType: clause.clauseType,\n      complianceStatus: 'acceptable', // Default to acceptable\n      riskLevel: 'low',\n      issues: [],\n      recommendations: [],\n      standardMatch: null,\n      replacementOptions: [],\n      needsModification: false,\n      recommendedText: null,\n      changeReason: null\n    };\n\n    // Find matching standard clause\n    const standardMatch = this.findMatchingStandardClause(clause, standardClauses);\n    if (standardMatch) {\n      analysis.standardMatch = standardMatch;\n\n      // Compare against standard\n      const complianceCheck = this.checkClauseCompliance(clause, standardMatch);\n      analysis.complianceStatus = complianceCheck.status;\n      analysis.riskLevel = complianceCheck.riskLevel;\n      analysis.issues = complianceCheck.issues;\n\n      // Determine if modification is needed\n      if (complianceCheck.status === 'non-acceptable' || complianceCheck.riskLevel === 'high') {\n        analysis.needsModification = true;\n        analysis.recommendedText = standardMatch.content;\n        analysis.changeReason = this.generateChangeReason(complianceCheck.issues, standardMatch);\n        analysis.replacementOptions = this.getReplacementOptions(standardMatch);\n      }\n\n      // Update the original clause object\n      clause.needsModification = analysis.needsModification;\n      clause.recommendedText = analysis.recommendedText;\n      clause.changeReason = analysis.changeReason;\n      clause.complianceStatus = analysis.complianceStatus;\n      clause.riskLevel = analysis.riskLevel;\n    }\n\n    // Apply risk rules\n    const riskAssessment = this.applyRiskRules(clause, riskRules);\n    if (riskAssessment.hasRisks) {\n      analysis.riskLevel = Math.max(analysis.riskLevel, riskAssessment.maxRiskLevel);\n      analysis.issues.push(...riskAssessment.risks);\n\n      // If high risk detected, mark for modification\n      if (riskAssessment.maxRiskLevel === 'high' && !analysis.needsModification) {\n        analysis.needsModification = true;\n        clause.needsModification = true;\n        analysis.changeReason = 'High risk issues detected that require clause modification';\n        clause.changeReason = analysis.changeReason;\n      }\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Check if a clause complies with standard requirements\n   */\n  checkClauseCompliance(clause, standardClause) {\n    const clauseText = clause.text.toLowerCase();\n    const standardText = standardClause.content.toLowerCase();\n    \n    // Simple compliance checks (in real implementation, this would be more sophisticated)\n    const issues = [];\n    let status = 'acceptable';\n    let riskLevel = standardClause.risk_level || 'low';\n    \n    // Check for required keywords\n    if (standardClause.keywords) {\n      const missingKeywords = standardClause.keywords.filter(keyword => \n        !clauseText.includes(keyword.toLowerCase())\n      );\n      \n      if (missingKeywords.length > 0) {\n        issues.push({\n          type: 'missing_keywords',\n          description: `Missing required terms: ${missingKeywords.join(', ')}`,\n          severity: 'medium'\n        });\n      }\n    }\n    \n    // Check if clause is negotiable\n    if (!standardClause.negotiable) {\n      // For non-negotiable clauses, check strict compliance\n      const similarity = this.calculateTextSimilarity(clauseText, standardText);\n      if (similarity < 0.7) {\n        status = 'non-acceptable';\n        riskLevel = 'high';\n        issues.push({\n          type: 'non_negotiable_deviation',\n          description: 'This clause deviates from non-negotiable standard requirements',\n          severity: 'high'\n        });\n      }\n    }\n    \n    return { status, riskLevel, issues };\n  }\n\n  /**\n   * Find matching standard clause for a contract clause\n   */\n  findMatchingStandardClause(clause, standardClauses) {\n    const clauseText = clause.text.toLowerCase();\n    \n    // Try to match by clause type first\n    let matches = standardClauses.filter(standard => \n      standard.category === clause.clauseType\n    );\n    \n    // If no type match, try keyword matching\n    if (matches.length === 0) {\n      matches = standardClauses.filter(standard => \n        standard.keywords && standard.keywords.some(keyword => \n          clauseText.includes(keyword.toLowerCase())\n        )\n      );\n    }\n    \n    // Return best match (first match for now, could be enhanced with scoring)\n    return matches.length > 0 ? matches[0] : null;\n  }\n\n  /**\n   * Get replacement options for a non-compliant clause\n   */\n  getReplacementOptions(standardClause) {\n    const options = [{\n      id: 'standard',\n      title: 'Standard Clause',\n      content: standardClause.content,\n      riskLevel: standardClause.risk_level,\n      recommended: true\n    }];\n    \n    // Add alternatives if available\n    if (standardClause.alternatives) {\n      standardClause.alternatives.forEach((alt, index) => {\n        options.push({\n          id: `alternative_${index}`,\n          title: alt.title,\n          content: alt.content,\n          riskLevel: alt.risk_level,\n          recommended: false\n        });\n      });\n    }\n    \n    return options;\n  }\n\n  /**\n   * Identify non-acceptable clauses that need revision\n   */\n  identifyNonAcceptableClauses(complianceAnalysis) {\n    return complianceAnalysis.problematicClauses.filter(clause => \n      clause.complianceStatus === 'non-acceptable' || \n      clause.riskLevel === 'high'\n    );\n  }\n\n  /**\n   * Generate comprehensive revision plan\n   */\n  async generateRevisionPlan(nonAcceptableClauses, playbook) {\n    const plan = {\n      totalRevisions: nonAcceptableClauses.length,\n      revisions: [],\n      estimatedImpact: 'medium',\n      readyForLegal: false\n    };\n    \n    for (const clause of nonAcceptableClauses) {\n      const revision = {\n        clauseId: clause.clauseId,\n        currentText: clause.clauseText,\n        issues: clause.issues,\n        recommendedAction: this.determineRecommendedAction(clause),\n        replacementOptions: clause.replacementOptions,\n        priority: this.calculateRevisionPriority(clause),\n        autoReplaceable: clause.replacementOptions.length > 0\n      };\n      \n      plan.revisions.push(revision);\n    }\n    \n    // Determine if contract is ready for legal review\n    plan.readyForLegal = this.isReadyForLegalReview(plan, playbook);\n    plan.estimatedImpact = this.calculateEstimatedImpact(plan);\n    \n    return plan;\n  }\n\n  /**\n   * Calculate overall acceptability status\n   */\n  calculateAcceptabilityStatus(complianceAnalysis, revisionPlan) {\n    const totalClauses = complianceAnalysis.clauseAnalysis.length;\n    const problematicClauses = complianceAnalysis.problematicClauses.length;\n    const acceptablePercentage = ((totalClauses - problematicClauses) / totalClauses) * 100;\n    \n    let status = 'not-acceptable';\n    let message = 'Contract requires significant revisions before legal review';\n    \n    if (acceptablePercentage >= 90) {\n      status = 'ready-for-legal';\n      message = 'Contract meets standards and is ready for legal review';\n    } else if (acceptablePercentage >= 75) {\n      status = 'minor-revisions';\n      message = 'Contract needs minor revisions before legal review';\n    } else if (acceptablePercentage >= 50) {\n      status = 'major-revisions';\n      message = 'Contract needs major revisions before legal review';\n    }\n    \n    return {\n      status,\n      message,\n      acceptablePercentage: Math.round(acceptablePercentage),\n      totalClauses,\n      problematicClauses,\n      readyForLegal: revisionPlan.readyForLegal,\n      nextSteps: this.generateNextSteps(status, revisionPlan)\n    };\n  }\n\n  /**\n   * Apply contract revisions automatically\n   */\n  async applyRevisions(revisionPlan, autoApprove = false) {\n    const results = {\n      applied: [],\n      failed: [],\n      requiresManualReview: []\n    };\n    \n    for (const revision of revisionPlan.revisions) {\n      if (revision.autoReplaceable && (autoApprove || revision.priority === 'high')) {\n        try {\n          const result = await this.applyRevision(revision);\n          results.applied.push(result);\n        } catch (error) {\n          results.failed.push({ revision, error: error.message });\n        }\n      } else {\n        results.requiresManualReview.push(revision);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Apply a single revision to the contract\n   */\n  async applyRevision(revision) {\n    // This would integrate with Word API to actually replace text\n    // For now, return the revision plan\n    return {\n      clauseId: revision.clauseId,\n      originalText: revision.currentText,\n      newText: revision.replacementOptions[0]?.content || revision.currentText,\n      applied: true,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Helper methods\n  identifyClauseType(text) {\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes('termination') || lowerText.includes('terminate')) return 'termination';\n    if (lowerText.includes('payment') || lowerText.includes('compensation')) return 'financial';\n    if (lowerText.includes('liability') || lowerText.includes('damages')) return 'liability';\n    if (lowerText.includes('confidential') || lowerText.includes('non-disclosure')) return 'confidentiality';\n    if (lowerText.includes('intellectual property') || lowerText.includes('copyright')) return 'rights';\n    return 'general';\n  }\n\n  extractKeywords(text) {\n    const keywords = [];\n    const lowerText = text.toLowerCase();\n    const commonTerms = ['termination', 'payment', 'liability', 'confidential', 'rights', 'territory', 'term'];\n    \n    commonTerms.forEach(term => {\n      if (lowerText.includes(term)) keywords.push(term);\n    });\n    \n    return keywords;\n  }\n\n  calculateTextSimilarity(text1, text2) {\n    // Simple similarity calculation (could be enhanced with more sophisticated algorithms)\n    const words1 = text1.split(' ');\n    const words2 = text2.split(' ');\n    const commonWords = words1.filter(word => words2.includes(word));\n    return commonWords.length / Math.max(words1.length, words2.length);\n  }\n\n  findMissingClauses(contractStructure, standardClauses) {\n    const contractText = contractStructure.articles\n      .flatMap(article => article.clauses)\n      .map(clause => clause.text.toLowerCase())\n      .join(' ');\n    \n    return standardClauses.filter(standard => {\n      if (!standard.keywords) return false;\n      return !standard.keywords.some(keyword => \n        contractText.includes(keyword.toLowerCase())\n      );\n    });\n  }\n\n  calculateComplianceScore(analysis) {\n    const total = analysis.clauseAnalysis.length;\n    const acceptable = analysis.acceptableClauses.length;\n    return total > 0 ? Math.round((acceptable / total) * 100) : 0;\n  }\n\n  determineRecommendedAction(clause) {\n    if (clause.riskLevel === 'high') return 'replace';\n    if (clause.issues.length > 2) return 'revise';\n    return 'review';\n  }\n\n  calculateRevisionPriority(clause) {\n    if (clause.riskLevel === 'high') return 'high';\n    if (clause.issues.some(issue => issue.severity === 'high')) return 'high';\n    if (clause.issues.length > 1) return 'medium';\n    return 'low';\n  }\n\n  isReadyForLegalReview(plan, playbook) {\n    const highPriorityRevisions = plan.revisions.filter(r => r.priority === 'high').length;\n    return highPriorityRevisions === 0;\n  }\n\n  calculateEstimatedImpact(plan) {\n    const highPriority = plan.revisions.filter(r => r.priority === 'high').length;\n    if (highPriority > 3) return 'high';\n    if (highPriority > 1) return 'medium';\n    return 'low';\n  }\n\n  generateNextSteps(status, revisionPlan) {\n    const steps = [];\n\n    switch (status) {\n      case 'ready-for-legal':\n        steps.push('Contract is ready for legal team review');\n        steps.push('Schedule legal review meeting');\n        steps.push('Prepare contract summary for legal team');\n        break;\n      case 'minor-revisions':\n        steps.push('Apply recommended minor revisions');\n        steps.push('Re-run contract analysis');\n        steps.push('Submit to legal team when ready');\n        break;\n      case 'major-revisions':\n        steps.push('Review and apply major clause revisions');\n        steps.push('Consider renegotiation of key terms');\n        steps.push('Re-analyze after revisions');\n        break;\n      default:\n        steps.push('Address all high-priority issues');\n        steps.push('Apply automatic clause replacements');\n        steps.push('Manual review of complex clauses');\n        steps.push('Re-run analysis after revisions');\n    }\n\n    return steps;\n  }\n\n  /**\n   * Generate detailed clause breakdown for UI display\n   */\n  generateClauseBreakdown(contractStructure) {\n    const breakdown = {\n      totalClauses: 0,\n      clausesNeedingModification: 0,\n      clausesAcceptable: 0,\n      articles: []\n    };\n\n    contractStructure.articles.forEach(article => {\n      const articleBreakdown = {\n        articleNumber: article.articleNumber,\n        title: article.title,\n        clauses: [],\n        totalClauses: article.clauses.length,\n        clausesNeedingModification: 0\n      };\n\n      article.clauses.forEach(clause => {\n        const clauseInfo = {\n          clauseNumber: clause.clauseNumber,\n          text: clause.text,\n          needsModification: clause.needsModification || false,\n          recommendedText: clause.recommendedText || null,\n          changeReason: clause.changeReason || null,\n          complianceStatus: clause.complianceStatus || 'acceptable',\n          riskLevel: clause.riskLevel || 'low'\n        };\n\n        articleBreakdown.clauses.push(clauseInfo);\n        breakdown.totalClauses++;\n\n        if (clauseInfo.needsModification) {\n          articleBreakdown.clausesNeedingModification++;\n          breakdown.clausesNeedingModification++;\n        } else {\n          breakdown.clausesAcceptable++;\n        }\n      });\n\n      breakdown.articles.push(articleBreakdown);\n    });\n\n    return breakdown;\n  }\n\n  /**\n   * Generate change reason based on compliance issues\n   */\n  generateChangeReason(issues, standardClause) {\n    if (issues.length === 0) {\n      return 'Clause updated to align with playbook standards';\n    }\n\n    const primaryIssue = issues[0];\n    switch (primaryIssue.type) {\n      case 'missing_keywords':\n        return `Missing required terms: ${primaryIssue.description}`;\n      case 'non_negotiable_deviation':\n        return 'Clause deviates from non-negotiable standard requirements';\n      case 'high_risk':\n        return 'High risk clause requires replacement with standard language';\n      default:\n        return `Compliance issue: ${primaryIssue.description}`;\n    }\n  }\n\n  /**\n   * Apply a single clause modification to the contract\n   */\n  async applyClauseModification(clauseNumber, newText) {\n    try {\n      // This would integrate with Word API to replace specific clause text\n      // For now, we'll simulate the change\n      console.log(`Applying modification to clause ${clauseNumber}`);\n      console.log(`New text: ${newText.substring(0, 100)}...`);\n\n      // Update the current review results\n      if (this.currentReview && this.currentReview.clauseBreakdown) {\n        this.currentReview.clauseBreakdown.articles.forEach(article => {\n          article.clauses.forEach(clause => {\n            if (clause.clauseNumber === clauseNumber) {\n              clause.text = newText;\n              clause.needsModification = false;\n              clause.complianceStatus = 'acceptable';\n              clause.riskLevel = 'low';\n            }\n          });\n        });\n      }\n\n      return {\n        success: true,\n        clauseNumber,\n        newText,\n        timestamp: new Date().toISOString()\n      };\n    } catch (error) {\n      return {\n        success: false,\n        clauseNumber,\n        error: error.message,\n        timestamp: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Apply all clause modifications at once\n   */\n  async applyAllModifications() {\n    const results = {\n      applied: [],\n      failed: [],\n      totalModifications: 0\n    };\n\n    if (!this.currentReview || !this.currentReview.clauseBreakdown) {\n      throw new Error('No review results available for modification');\n    }\n\n    // Collect all clauses that need modification\n    const clausesToModify = [];\n    this.currentReview.clauseBreakdown.articles.forEach(article => {\n      article.clauses.forEach(clause => {\n        if (clause.needsModification && clause.recommendedText) {\n          clausesToModify.push(clause);\n        }\n      });\n    });\n\n    results.totalModifications = clausesToModify.length;\n\n    // Apply each modification\n    for (const clause of clausesToModify) {\n      try {\n        const result = await this.applyClauseModification(clause.clauseNumber, clause.recommendedText);\n        if (result.success) {\n          results.applied.push(result);\n        } else {\n          results.failed.push(result);\n        }\n      } catch (error) {\n        results.failed.push({\n          success: false,\n          clauseNumber: clause.clauseNumber,\n          error: error.message\n        });\n      }\n    }\n\n    return results;\n  }\n}\n\n// Export singleton instance\nexport const contractReviewer = new ContractReviewer();\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","return","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","ContractReviewer","_classCallCheck","this","playbookService","currentReview","_initialize","_callee","_yield$import","_context","_reviewContract","_callee2","contractText","agreementType","contentType","contractStructure","playbook","complianceAnalysis","nonAcceptableClauses","revisionPlan","acceptabilityStatus","_context2","initialize","console","log","concat","parseContractStructure","loadPlaybook","analyzeCompliance","identifyNonAcceptableClauses","generateRevisionPlan","calculateAcceptabilityStatus","reviewTimestamp","Date","toISOString","clauseBreakdown","generateClauseBreakdown","_x","_x2","_x3","_parseContractStructure","_callee3","_yield$import2","structure","_this","_context3","articles","article","articleIndex","articleNumber","clauses","clause","clauseIndex","clauseNumber","clauseType","identifyClauseType","text","keywords","extractKeywords","riskLevel","complianceStatus","needsModification","recommendedText","changeReason","_x4","_analyzeCompliance","_callee4","_playbook$clauses","_playbook$riskRules","analysis","standardClauses","riskRules","_iterator","_step","_iterator2","_step2","clauseAnalysis","_context4","overallScore","missingClauses","problematicClauses","acceptableClauses","risk_rules","_createForOfIteratorHelper","analyzeClause","t0","t1","findMissingClauses","calculateComplianceScore","_x5","_x6","_analyzeClause","_callee5","standardMatch","complianceCheck","riskAssessment","_analysis$issues","_context5","clauseId","clauseText","issues","recommendations","replacementOptions","findMatchingStandardClause","checkClauseCompliance","status","content","generateChangeReason","getReplacementOptions","applyRiskRules","hasRisks","Math","max","maxRiskLevel","_toConsumableArray","risks","_x7","_x8","_x9","standardClause","toLowerCase","standardText","risk_level","missingKeywords","filter","keyword","includes","description","join","severity","negotiable","calculateTextSimilarity","matches","standard","category","some","options","id","title","recommended","alternatives","alt","index","_generateRevisionPlan","_callee6","plan","_iterator3","_step3","revision","_context6","totalRevisions","revisions","estimatedImpact","readyForLegal","currentText","recommendedAction","determineRecommendedAction","priority","calculateRevisionPriority","autoReplaceable","err","isReadyForLegalReview","calculateEstimatedImpact","_x0","_x1","totalClauses","acceptablePercentage","message","round","nextSteps","generateNextSteps","_applyRevisions","_callee7","autoApprove","results","_iterator4","_step4","result","_args7","_context7","undefined","applied","failed","requiresManualReview","applyRevision","error","_x10","_applyRevision","_callee8","_revision$replacement","_context8","originalText","newText","timestamp","_x11","lowerText","term","text1","text2","words1","split","words2","word","flatMap","map","total","acceptable","issue","highPriority","steps","breakdown","clausesNeedingModification","clausesAcceptable","articleBreakdown","clauseInfo","primaryIssue","_applyClauseModification","_callee9","_context9","substring","success","_x12","_x13","_applyAllModifications","_callee0","clausesToModify","_i","_clausesToModify","_context0","totalModifications","applyClauseModification","contractReviewer"],"sourceRoot":""}