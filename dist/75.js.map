{"version":3,"file":"75.js","mappings":"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","sources":["webpack://starling-word-addin/./src/taskpane/services/contract-reviewer.js"],"sourcesContent":["// Contract Review and Revision Service\n// Analyzes contracts against playbook standards and automatically revises non-acceptable clauses\n\nexport class ContractReviewer {\n  constructor() {\n    this.playbookService = null;\n    this.currentReview = null;\n  }\n\n  /**\n   * Initialize the reviewer with playbook service\n   */\n  async initialize() {\n    if (!this.playbookService) {\n      const { playbookService } = await import('../../shared/playbook-service.js');\n      this.playbookService = playbookService;\n    }\n  }\n\n  /**\n   * Comprehensive contract review workflow\n   * @param {string} contractText - The contract text to review\n   * @param {string} agreementType - Type of agreement (e.g., 'content-management')\n   * @param {string} contentType - Content type (e.g., 'music', 'non-music')\n   * @returns {Promise<Object>} Complete review results with revision recommendations\n   */\n  async reviewContract(contractText, agreementType, contentType) {\n    await this.initialize();\n    \n    console.log(`Starting comprehensive review for ${agreementType}-${contentType}`);\n    \n    // Step 1: Parse contract structure\n    const contractStructure = await this.parseContractStructure(contractText);\n    \n    // Step 2: Load playbook standards\n    const playbook = await this.playbookService.loadPlaybook(agreementType, contentType);\n    \n    // Step 3: Analyze against playbook standards\n    const complianceAnalysis = await this.analyzeCompliance(contractStructure, playbook);\n    \n    // Step 4: Identify non-acceptable clauses\n    const nonAcceptableClauses = this.identifyNonAcceptableClauses(complianceAnalysis);\n    \n    // Step 5: Generate revision recommendations\n    const revisionPlan = await this.generateRevisionPlan(nonAcceptableClauses, playbook);\n    \n    // Step 6: Calculate overall acceptability\n    const acceptabilityStatus = this.calculateAcceptabilityStatus(complianceAnalysis, revisionPlan);\n    \n    this.currentReview = {\n      contractStructure,\n      complianceAnalysis,\n      nonAcceptableClauses,\n      revisionPlan,\n      acceptabilityStatus,\n      playbook,\n      reviewTimestamp: new Date().toISOString()\n    };\n    \n    return this.currentReview;\n  }\n\n  /**\n   * Parse contract into structured format for analysis\n   */\n  async parseContractStructure(contractText) {\n    const { parseContractStructure } = await import('./contract-parser.js');\n    const structure = parseContractStructure(contractText);\n    \n    // Enhance with clause identification\n    structure.articles.forEach(article => {\n      article.clauses.forEach(clause => {\n        clause.clauseType = this.identifyClauseType(clause.text);\n        clause.keywords = this.extractKeywords(clause.text);\n        clause.riskLevel = 'unknown';\n        clause.complianceStatus = 'pending';\n      });\n    });\n    \n    return structure;\n  }\n\n  /**\n   * Analyze contract compliance against playbook standards\n   */\n  async analyzeCompliance(contractStructure, playbook) {\n    const analysis = {\n      overallScore: 0,\n      clauseAnalysis: [],\n      missingClauses: [],\n      problematicClauses: [],\n      acceptableClauses: []\n    };\n    \n    const standardClauses = playbook.clauses?.clauses || [];\n    const riskRules = playbook.riskRules?.risk_rules || [];\n    \n    // Analyze each clause in the contract\n    for (const article of contractStructure.articles) {\n      for (const clause of article.clauses) {\n        const clauseAnalysis = await this.analyzeClause(clause, standardClauses, riskRules);\n        analysis.clauseAnalysis.push(clauseAnalysis);\n        \n        // Categorize clause based on analysis\n        if (clauseAnalysis.complianceStatus === 'non-acceptable') {\n          analysis.problematicClauses.push(clauseAnalysis);\n        } else if (clauseAnalysis.complianceStatus === 'acceptable') {\n          analysis.acceptableClauses.push(clauseAnalysis);\n        }\n      }\n    }\n    \n    // Check for missing essential clauses\n    analysis.missingClauses = this.findMissingClauses(contractStructure, standardClauses);\n    \n    // Calculate overall compliance score\n    analysis.overallScore = this.calculateComplianceScore(analysis);\n    \n    return analysis;\n  }\n\n  /**\n   * Analyze individual clause against standards\n   */\n  async analyzeClause(clause, standardClauses, riskRules) {\n    const analysis = {\n      clauseId: clause.number,\n      clauseText: clause.text,\n      clauseType: clause.clauseType,\n      complianceStatus: 'acceptable', // Default to acceptable\n      riskLevel: 'low',\n      issues: [],\n      recommendations: [],\n      standardMatch: null,\n      replacementOptions: []\n    };\n    \n    // Find matching standard clause\n    const standardMatch = this.findMatchingStandardClause(clause, standardClauses);\n    if (standardMatch) {\n      analysis.standardMatch = standardMatch;\n      \n      // Compare against standard\n      const complianceCheck = this.checkClauseCompliance(clause, standardMatch);\n      analysis.complianceStatus = complianceCheck.status;\n      analysis.riskLevel = complianceCheck.riskLevel;\n      analysis.issues = complianceCheck.issues;\n      \n      // Get replacement options if non-compliant\n      if (complianceCheck.status === 'non-acceptable') {\n        analysis.replacementOptions = this.getReplacementOptions(standardMatch);\n      }\n    }\n    \n    // Apply risk rules\n    const riskAssessment = this.applyRiskRules(clause, riskRules);\n    if (riskAssessment.hasRisks) {\n      analysis.riskLevel = Math.max(analysis.riskLevel, riskAssessment.maxRiskLevel);\n      analysis.issues.push(...riskAssessment.risks);\n    }\n    \n    return analysis;\n  }\n\n  /**\n   * Check if a clause complies with standard requirements\n   */\n  checkClauseCompliance(clause, standardClause) {\n    const clauseText = clause.text.toLowerCase();\n    const standardText = standardClause.content.toLowerCase();\n    \n    // Simple compliance checks (in real implementation, this would be more sophisticated)\n    const issues = [];\n    let status = 'acceptable';\n    let riskLevel = standardClause.risk_level || 'low';\n    \n    // Check for required keywords\n    if (standardClause.keywords) {\n      const missingKeywords = standardClause.keywords.filter(keyword => \n        !clauseText.includes(keyword.toLowerCase())\n      );\n      \n      if (missingKeywords.length > 0) {\n        issues.push({\n          type: 'missing_keywords',\n          description: `Missing required terms: ${missingKeywords.join(', ')}`,\n          severity: 'medium'\n        });\n      }\n    }\n    \n    // Check if clause is negotiable\n    if (!standardClause.negotiable) {\n      // For non-negotiable clauses, check strict compliance\n      const similarity = this.calculateTextSimilarity(clauseText, standardText);\n      if (similarity < 0.7) {\n        status = 'non-acceptable';\n        riskLevel = 'high';\n        issues.push({\n          type: 'non_negotiable_deviation',\n          description: 'This clause deviates from non-negotiable standard requirements',\n          severity: 'high'\n        });\n      }\n    }\n    \n    return { status, riskLevel, issues };\n  }\n\n  /**\n   * Find matching standard clause for a contract clause\n   */\n  findMatchingStandardClause(clause, standardClauses) {\n    const clauseText = clause.text.toLowerCase();\n    \n    // Try to match by clause type first\n    let matches = standardClauses.filter(standard => \n      standard.category === clause.clauseType\n    );\n    \n    // If no type match, try keyword matching\n    if (matches.length === 0) {\n      matches = standardClauses.filter(standard => \n        standard.keywords && standard.keywords.some(keyword => \n          clauseText.includes(keyword.toLowerCase())\n        )\n      );\n    }\n    \n    // Return best match (first match for now, could be enhanced with scoring)\n    return matches.length > 0 ? matches[0] : null;\n  }\n\n  /**\n   * Get replacement options for a non-compliant clause\n   */\n  getReplacementOptions(standardClause) {\n    const options = [{\n      id: 'standard',\n      title: 'Standard Clause',\n      content: standardClause.content,\n      riskLevel: standardClause.risk_level,\n      recommended: true\n    }];\n    \n    // Add alternatives if available\n    if (standardClause.alternatives) {\n      standardClause.alternatives.forEach((alt, index) => {\n        options.push({\n          id: `alternative_${index}`,\n          title: alt.title,\n          content: alt.content,\n          riskLevel: alt.risk_level,\n          recommended: false\n        });\n      });\n    }\n    \n    return options;\n  }\n\n  /**\n   * Identify non-acceptable clauses that need revision\n   */\n  identifyNonAcceptableClauses(complianceAnalysis) {\n    return complianceAnalysis.problematicClauses.filter(clause => \n      clause.complianceStatus === 'non-acceptable' || \n      clause.riskLevel === 'high'\n    );\n  }\n\n  /**\n   * Generate comprehensive revision plan\n   */\n  async generateRevisionPlan(nonAcceptableClauses, playbook) {\n    const plan = {\n      totalRevisions: nonAcceptableClauses.length,\n      revisions: [],\n      estimatedImpact: 'medium',\n      readyForLegal: false\n    };\n    \n    for (const clause of nonAcceptableClauses) {\n      const revision = {\n        clauseId: clause.clauseId,\n        currentText: clause.clauseText,\n        issues: clause.issues,\n        recommendedAction: this.determineRecommendedAction(clause),\n        replacementOptions: clause.replacementOptions,\n        priority: this.calculateRevisionPriority(clause),\n        autoReplaceable: clause.replacementOptions.length > 0\n      };\n      \n      plan.revisions.push(revision);\n    }\n    \n    // Determine if contract is ready for legal review\n    plan.readyForLegal = this.isReadyForLegalReview(plan, playbook);\n    plan.estimatedImpact = this.calculateEstimatedImpact(plan);\n    \n    return plan;\n  }\n\n  /**\n   * Calculate overall acceptability status\n   */\n  calculateAcceptabilityStatus(complianceAnalysis, revisionPlan) {\n    const totalClauses = complianceAnalysis.clauseAnalysis.length;\n    const problematicClauses = complianceAnalysis.problematicClauses.length;\n    const acceptablePercentage = ((totalClauses - problematicClauses) / totalClauses) * 100;\n    \n    let status = 'not-acceptable';\n    let message = 'Contract requires significant revisions before legal review';\n    \n    if (acceptablePercentage >= 90) {\n      status = 'ready-for-legal';\n      message = 'Contract meets standards and is ready for legal review';\n    } else if (acceptablePercentage >= 75) {\n      status = 'minor-revisions';\n      message = 'Contract needs minor revisions before legal review';\n    } else if (acceptablePercentage >= 50) {\n      status = 'major-revisions';\n      message = 'Contract needs major revisions before legal review';\n    }\n    \n    return {\n      status,\n      message,\n      acceptablePercentage: Math.round(acceptablePercentage),\n      totalClauses,\n      problematicClauses,\n      readyForLegal: revisionPlan.readyForLegal,\n      nextSteps: this.generateNextSteps(status, revisionPlan)\n    };\n  }\n\n  /**\n   * Apply contract revisions automatically\n   */\n  async applyRevisions(revisionPlan, autoApprove = false) {\n    const results = {\n      applied: [],\n      failed: [],\n      requiresManualReview: []\n    };\n    \n    for (const revision of revisionPlan.revisions) {\n      if (revision.autoReplaceable && (autoApprove || revision.priority === 'high')) {\n        try {\n          const result = await this.applyRevision(revision);\n          results.applied.push(result);\n        } catch (error) {\n          results.failed.push({ revision, error: error.message });\n        }\n      } else {\n        results.requiresManualReview.push(revision);\n      }\n    }\n    \n    return results;\n  }\n\n  /**\n   * Apply a single revision to the contract\n   */\n  async applyRevision(revision) {\n    // This would integrate with Word API to actually replace text\n    // For now, return the revision plan\n    return {\n      clauseId: revision.clauseId,\n      originalText: revision.currentText,\n      newText: revision.replacementOptions[0]?.content || revision.currentText,\n      applied: true,\n      timestamp: new Date().toISOString()\n    };\n  }\n\n  // Helper methods\n  identifyClauseType(text) {\n    const lowerText = text.toLowerCase();\n    if (lowerText.includes('termination') || lowerText.includes('terminate')) return 'termination';\n    if (lowerText.includes('payment') || lowerText.includes('compensation')) return 'financial';\n    if (lowerText.includes('liability') || lowerText.includes('damages')) return 'liability';\n    if (lowerText.includes('confidential') || lowerText.includes('non-disclosure')) return 'confidentiality';\n    if (lowerText.includes('intellectual property') || lowerText.includes('copyright')) return 'rights';\n    return 'general';\n  }\n\n  extractKeywords(text) {\n    const keywords = [];\n    const lowerText = text.toLowerCase();\n    const commonTerms = ['termination', 'payment', 'liability', 'confidential', 'rights', 'territory', 'term'];\n    \n    commonTerms.forEach(term => {\n      if (lowerText.includes(term)) keywords.push(term);\n    });\n    \n    return keywords;\n  }\n\n  calculateTextSimilarity(text1, text2) {\n    // Simple similarity calculation (could be enhanced with more sophisticated algorithms)\n    const words1 = text1.split(' ');\n    const words2 = text2.split(' ');\n    const commonWords = words1.filter(word => words2.includes(word));\n    return commonWords.length / Math.max(words1.length, words2.length);\n  }\n\n  findMissingClauses(contractStructure, standardClauses) {\n    const contractText = contractStructure.articles\n      .flatMap(article => article.clauses)\n      .map(clause => clause.text.toLowerCase())\n      .join(' ');\n    \n    return standardClauses.filter(standard => {\n      if (!standard.keywords) return false;\n      return !standard.keywords.some(keyword => \n        contractText.includes(keyword.toLowerCase())\n      );\n    });\n  }\n\n  calculateComplianceScore(analysis) {\n    const total = analysis.clauseAnalysis.length;\n    const acceptable = analysis.acceptableClauses.length;\n    return total > 0 ? Math.round((acceptable / total) * 100) : 0;\n  }\n\n  determineRecommendedAction(clause) {\n    if (clause.riskLevel === 'high') return 'replace';\n    if (clause.issues.length > 2) return 'revise';\n    return 'review';\n  }\n\n  calculateRevisionPriority(clause) {\n    if (clause.riskLevel === 'high') return 'high';\n    if (clause.issues.some(issue => issue.severity === 'high')) return 'high';\n    if (clause.issues.length > 1) return 'medium';\n    return 'low';\n  }\n\n  isReadyForLegalReview(plan, playbook) {\n    const highPriorityRevisions = plan.revisions.filter(r => r.priority === 'high').length;\n    return highPriorityRevisions === 0;\n  }\n\n  calculateEstimatedImpact(plan) {\n    const highPriority = plan.revisions.filter(r => r.priority === 'high').length;\n    if (highPriority > 3) return 'high';\n    if (highPriority > 1) return 'medium';\n    return 'low';\n  }\n\n  generateNextSteps(status, revisionPlan) {\n    const steps = [];\n    \n    switch (status) {\n      case 'ready-for-legal':\n        steps.push('Contract is ready for legal team review');\n        steps.push('Schedule legal review meeting');\n        steps.push('Prepare contract summary for legal team');\n        break;\n      case 'minor-revisions':\n        steps.push('Apply recommended minor revisions');\n        steps.push('Re-run contract analysis');\n        steps.push('Submit to legal team when ready');\n        break;\n      case 'major-revisions':\n        steps.push('Review and apply major clause revisions');\n        steps.push('Consider renegotiation of key terms');\n        steps.push('Re-analyze after revisions');\n        break;\n      default:\n        steps.push('Address all high-priority issues');\n        steps.push('Apply automatic clause replacements');\n        steps.push('Manual review of complex clauses');\n        steps.push('Re-run analysis after revisions');\n    }\n    \n    return steps;\n  }\n}\n\n// Export singleton instance\nexport const contractReviewer = new ContractReviewer();\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","return","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","ContractReviewer","_classCallCheck","this","playbookService","currentReview","_initialize","_callee","_yield$import","_context","_reviewContract","_callee2","contractText","agreementType","contentType","contractStructure","playbook","complianceAnalysis","nonAcceptableClauses","revisionPlan","acceptabilityStatus","_context2","initialize","console","log","concat","parseContractStructure","loadPlaybook","analyzeCompliance","identifyNonAcceptableClauses","generateRevisionPlan","calculateAcceptabilityStatus","reviewTimestamp","Date","toISOString","_x","_x2","_x3","_parseContractStructure","_callee3","_yield$import2","structure","_this","_context3","articles","article","clauses","clause","clauseType","identifyClauseType","text","keywords","extractKeywords","riskLevel","complianceStatus","_x4","_analyzeCompliance","_callee4","_playbook$clauses","_playbook$riskRules","analysis","standardClauses","riskRules","_iterator","_step","_iterator2","_step2","clauseAnalysis","_context4","overallScore","missingClauses","problematicClauses","acceptableClauses","risk_rules","_createForOfIteratorHelper","analyzeClause","t0","t1","findMissingClauses","calculateComplianceScore","_x5","_x6","_analyzeClause","_callee5","standardMatch","complianceCheck","riskAssessment","_analysis$issues","_context5","clauseId","number","clauseText","issues","recommendations","replacementOptions","findMatchingStandardClause","checkClauseCompliance","status","getReplacementOptions","applyRiskRules","hasRisks","Math","max","maxRiskLevel","_toConsumableArray","risks","_x7","_x8","_x9","standardClause","toLowerCase","standardText","content","risk_level","missingKeywords","filter","keyword","includes","description","join","severity","negotiable","calculateTextSimilarity","matches","standard","category","some","options","id","title","recommended","alternatives","alt","index","_generateRevisionPlan","_callee6","plan","_iterator3","_step3","revision","_context6","totalRevisions","revisions","estimatedImpact","readyForLegal","currentText","recommendedAction","determineRecommendedAction","priority","calculateRevisionPriority","autoReplaceable","err","isReadyForLegalReview","calculateEstimatedImpact","_x0","_x1","totalClauses","acceptablePercentage","message","round","nextSteps","generateNextSteps","_applyRevisions","_callee7","autoApprove","results","_iterator4","_step4","result","_args7","_context7","undefined","applied","failed","requiresManualReview","applyRevision","error","_x10","_applyRevision","_callee8","_revision$replacement","_context8","originalText","newText","timestamp","_x11","lowerText","term","text1","text2","words1","split","words2","word","flatMap","map","total","acceptable","issue","highPriority","steps","contractReviewer"],"sourceRoot":""}