{"version":3,"file":"669.js","mappings":"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","sources":["webpack://starling-word-addin/./src/shared/playbook-service.js"],"sourcesContent":["// Playbook Service - Manages contract playbooks and templates\nexport class PlaybookService {\n  constructor() {\n    this.playbooks = new Map();\n    this.loadedPlaybooks = new Set();\n  }\n\n  /**\n   * Load a playbook for a specific contract type and content type\n   * @param {string} agreementType - The agreement type (e.g., 'content-management')\n   * @param {string} contentType - The content type (e.g., 'music', 'non-music', 'both')\n   * @returns {Promise<Object>} The loaded playbook\n   */\n  async loadPlaybook(agreementType, contentType) {\n    const playbookKey = `${agreementType}-${contentType}`;\n    \n    if (this.playbooks.has(playbookKey)) {\n      return this.playbooks.get(playbookKey);\n    }\n\n    try {\n      const playbook = await this.fetchPlaybookFiles(agreementType, contentType);\n      this.playbooks.set(playbookKey, playbook);\n      this.loadedPlaybooks.add(playbookKey);\n      \n      console.log(`Loaded playbook: ${playbookKey}`);\n      return playbook;\n    } catch (error) {\n      console.error(`Failed to load playbook ${playbookKey}:`, error);\n      return this.getFallbackPlaybook(agreementType, contentType);\n    }\n  }\n\n  /**\n   * Fetch all playbook files for a specific type\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Combined playbook data\n   */\n  async fetchPlaybookFiles(agreementType, contentType) {\n    const baseUrl = this.getPlaybookBaseUrl();\n    const playbookPath = `${agreementType}/${contentType}`;\n    \n    const [template, clauses, riskRules, formFields] = await Promise.all([\n      this.fetchJsonFile(`${baseUrl}/${playbookPath}/template.json`),\n      this.fetchJsonFile(`${baseUrl}/${playbookPath}/clauses.json`),\n      this.fetchJsonFile(`${baseUrl}/${playbookPath}/risk-rules.json`).catch(() => null),\n      this.fetchJsonFile(`${baseUrl}/${playbookPath}/form-fields.json`).catch(() => null)\n    ]);\n\n    return {\n      metadata: {\n        agreementType,\n        contentType,\n        loadedAt: new Date().toISOString()\n      },\n      template,\n      clauses,\n      riskRules,\n      formFields\n    };\n  }\n\n  /**\n   * Get the base URL for playbook files\n   * @returns {string} Base URL\n   */\n  getPlaybookBaseUrl() {\n    // In development, use local files\n    if (window.location.hostname === 'localhost') {\n      return '/playbooks';\n    }\n    // In production, use GitHub Pages\n    return 'https://mfellsbbtv.github.io/starling-word-addin/playbooks';\n  }\n\n  /**\n   * Fetch a JSON file with error handling\n   * @param {string} url \n   * @returns {Promise<Object>}\n   */\n  async fetchJsonFile(url) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch ${url}: ${response.status}`);\n    }\n    return await response.json();\n  }\n\n  /**\n   * Get contract template for generation\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Template data\n   */\n  async getTemplate(agreementType, contentType) {\n    const playbook = await this.loadPlaybook(agreementType, contentType);\n    return playbook.template;\n  }\n\n  /**\n   * Get standard clauses for analysis\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Clauses data\n   */\n  async getClauses(agreementType, contentType) {\n    const playbook = await this.loadPlaybook(agreementType, contentType);\n    return playbook.clauses;\n  }\n\n  /**\n   * Get risk assessment rules\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Risk rules data\n   */\n  async getRiskRules(agreementType, contentType) {\n    const playbook = await this.loadPlaybook(agreementType, contentType);\n    return playbook.riskRules;\n  }\n\n  /**\n   * Get form field configuration\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Form fields data\n   */\n  async getFormFields(agreementType, contentType) {\n    const playbook = await this.loadPlaybook(agreementType, contentType);\n    return playbook.formFields;\n  }\n\n  /**\n   * Generate contract using playbook template\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @param {Object} formData \n   * @returns {Promise<string>} Generated contract text\n   */\n  async generateContract(agreementType, contentType, formData) {\n    const template = await this.getTemplate(agreementType, contentType);\n    \n    if (!template) {\n      throw new Error(`No template found for ${agreementType}-${contentType}`);\n    }\n\n    return this.processTemplate(template, formData);\n  }\n\n  /**\n   * Process template with form data\n   * @param {Object} template \n   * @param {Object} formData \n   * @returns {string} Processed contract text\n   */\n  processTemplate(template, formData) {\n    let contractText = `${template.template.title}\\n\\n`;\n    \n    // Process each section\n    template.template.sections.forEach(section => {\n      contractText += `${section.title}\\n\\n`;\n      contractText += this.replaceVariables(section.content, formData) + '\\n\\n';\n    });\n\n    return contractText;\n  }\n\n  /**\n   * Replace template variables with actual values\n   * @param {string} content \n   * @param {Object} formData \n   * @returns {string} Content with variables replaced\n   */\n  replaceVariables(content, formData) {\n    let processedContent = content;\n    \n    // Replace all [VARIABLE] placeholders\n    Object.keys(formData).forEach(key => {\n      const placeholder = `[${key.toUpperCase()}]`;\n      const value = formData[key] || `[${key.toUpperCase()}]`;\n      processedContent = processedContent.replace(new RegExp(placeholder, 'g'), value);\n    });\n\n    // Handle calculated variables\n    if (formData.revenue_split) {\n      const artistSplit = 100 - parseFloat(formData.revenue_split);\n      processedContent = processedContent.replace(/\\[ARTIST_SPLIT\\]/g, artistSplit.toString());\n    }\n\n    // Handle conditional content\n    if (formData.advance_amount && parseFloat(formData.advance_amount) > 0) {\n      processedContent = processedContent.replace(\n        /\\[ADVANCE_CLAUSE\\]/g, \n        `Manager shall provide an advance of $${formData.advance_amount}, which shall be recoupable from Artist's future earnings.`\n      );\n    } else {\n      processedContent = processedContent.replace(/\\[ADVANCE_CLAUSE\\]/g, 'No advance payment is provided under this Agreement.');\n    }\n\n    return processedContent;\n  }\n\n  /**\n   * Assess contract risks using playbook rules\n   * @param {string} contractText \n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Promise<Object>} Risk assessment results\n   */\n  async assessRisks(contractText, agreementType, contentType) {\n    const riskRules = await this.getRiskRules(agreementType, contentType);\n    \n    if (!riskRules) {\n      return this.getBasicRiskAssessment(contractText);\n    }\n\n    const risks = [];\n    const contractLower = contractText.toLowerCase();\n\n    // Process each risk rule\n    riskRules.risk_rules.forEach(rule => {\n      const riskDetected = this.evaluateRiskRule(rule, contractLower);\n      if (riskDetected) {\n        risks.push({\n          id: rule.id,\n          severity: rule.severity,\n          title: rule.title,\n          description: rule.description,\n          recommendation: rule.recommendation,\n          category: rule.category\n        });\n      }\n    });\n\n    return {\n      risks,\n      complianceScore: this.calculateComplianceScore(risks, riskRules.scoring_algorithm),\n      assessmentDate: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Evaluate a single risk rule against contract text\n   * @param {Object} rule \n   * @param {string} contractText \n   * @returns {boolean} Whether risk is detected\n   */\n  evaluateRiskRule(rule, contractText) {\n    const detection = rule.detection;\n    \n    switch (detection.type) {\n      case 'keyword_absence':\n        return !detection.keywords.some(keyword => contractText.includes(keyword.toLowerCase()));\n      \n      case 'keyword_analysis':\n        const foundKeywords = detection.keywords.filter(keyword => \n          contractText.includes(keyword.toLowerCase())\n        ).length;\n        return foundKeywords < detection.threshold;\n      \n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Calculate compliance score based on detected risks\n   * @param {Array} risks \n   * @param {Object} scoringAlgorithm \n   * @returns {number} Compliance score (0-100)\n   */\n  calculateComplianceScore(risks, scoringAlgorithm) {\n    if (!scoringAlgorithm) return 75; // Default score\n    \n    let score = scoringAlgorithm.base_score;\n    \n    risks.forEach(risk => {\n      const deduction = scoringAlgorithm.deductions[risk.severity] || 10;\n      score -= deduction;\n    });\n\n    return Math.max(scoringAlgorithm.minimum_score, Math.min(scoringAlgorithm.maximum_score, score));\n  }\n\n  /**\n   * Get fallback playbook when loading fails\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Object} Fallback playbook\n   */\n  getFallbackPlaybook(agreementType, contentType) {\n    return {\n      metadata: {\n        agreementType,\n        contentType,\n        fallback: true\n      },\n      template: this.getBasicTemplate(agreementType, contentType),\n      clauses: this.getBasicClauses(),\n      riskRules: null,\n      formFields: null\n    };\n  }\n\n  /**\n   * Get basic template for fallback\n   * @param {string} agreementType \n   * @param {string} contentType \n   * @returns {Object} Basic template\n   */\n  getBasicTemplate(agreementType, contentType) {\n    return {\n      template: {\n        title: `${agreementType.toUpperCase()} AGREEMENT`,\n        sections: [\n          {\n            id: 'basic',\n            title: 'AGREEMENT',\n            content: `This ${agreementType} agreement covers ${contentType} content management services.`\n          }\n        ]\n      }\n    };\n  }\n\n  /**\n   * Get basic clauses for fallback\n   * @returns {Object} Basic clauses\n   */\n  getBasicClauses() {\n    return {\n      clauses: [\n        {\n          id: 'basic_termination',\n          category: 'termination',\n          title: 'Basic Termination',\n          content: 'Either party may terminate with 30 days notice.',\n          keywords: ['termination', 'terminate']\n        }\n      ]\n    };\n  }\n\n  /**\n   * Get basic risk assessment for fallback\n   * @param {string} contractText \n   * @returns {Object} Basic risk assessment\n   */\n  getBasicRiskAssessment(contractText) {\n    const risks = [];\n    const contractLower = contractText.toLowerCase();\n    \n    if (!contractLower.includes('termination')) {\n      risks.push({\n        severity: 'high',\n        title: 'Missing Termination Clause',\n        description: 'Contract lacks termination provisions'\n      });\n    }\n\n    return {\n      risks,\n      complianceScore: risks.length === 0 ? 85 : 65,\n      assessmentDate: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Get list of available playbooks\n   * @returns {Array} List of available playbook combinations\n   */\n  getAvailablePlaybooks() {\n    return [\n      { agreementType: 'content-management', contentType: 'music' },\n      { agreementType: 'content-management', contentType: 'non-music' },\n      { agreementType: 'content-management', contentType: 'both' },\n      { agreementType: 'licensing', contentType: 'music' },\n      { agreementType: 'licensing', contentType: 'non-music' },\n      { agreementType: 'licensing', contentType: 'both' },\n      { agreementType: 'distribution', contentType: 'music' },\n      { agreementType: 'distribution', contentType: 'non-music' },\n      { agreementType: 'distribution', contentType: 'both' },\n      { agreementType: 'talent', contentType: 'music' },\n      { agreementType: 'talent', contentType: 'non-music' },\n      { agreementType: 'talent', contentType: 'both' }\n    ];\n  }\n}\n\n// Export singleton instance\nexport const playbookService = new PlaybookService();\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","return","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","PlaybookService","_classCallCheck","this","playbooks","Map","loadedPlaybooks","Set","_loadPlaybook","_callee","agreementType","contentType","playbookKey","playbook","_context","concat","has","get","fetchPlaybookFiles","set","add","console","log","t0","error","getFallbackPlaybook","_x","_x2","_fetchPlaybookFiles","_callee2","baseUrl","playbookPath","_yield$Promise$all","_yield$Promise$all2","template","clauses","riskRules","formFields","_context2","getPlaybookBaseUrl","all","fetchJsonFile","_slicedToArray","metadata","loadedAt","Date","toISOString","_x3","_x4","window","location","hostname","_fetchJsonFile","_callee3","url","response","_context3","fetch","ok","status","json","_x5","_getTemplate","_callee4","_context4","loadPlaybook","_x6","_x7","_getClauses","_callee5","_context5","_x8","_x9","_getRiskRules","_callee6","_context6","_x0","_x1","_getFormFields","_callee7","_context7","_x10","_x11","_generateContract","_callee8","formData","_context8","getTemplate","processTemplate","_x12","_x13","_x14","_this","contractText","title","sections","section","replaceVariables","content","processedContent","placeholder","toUpperCase","replace","RegExp","revenue_split","artistSplit","parseFloat","toString","advance_amount","_assessRisks","_callee9","risks","contractLower","_this2","_context9","getRiskRules","getBasicRiskAssessment","toLowerCase","risk_rules","rule","evaluateRiskRule","id","severity","description","recommendation","category","complianceScore","calculateComplianceScore","scoring_algorithm","assessmentDate","_x15","_x16","_x17","detection","keywords","some","keyword","includes","filter","threshold","scoringAlgorithm","score","base_score","risk","deduction","deductions","Math","max","minimum_score","min","maximum_score","fallback","getBasicTemplate","getBasicClauses","playbookService"],"sourceRoot":""}