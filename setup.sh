#!/bin/bash

# RHEI Word Add-in Complete Setup Script
# This script sets up everything needed to deploy the Word add-in to AWS

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_header() {
    echo -e "${PURPLE}[SETUP]${NC} $1"
}

show_banner() {
    echo ""
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                                                              ║"
    echo "║              RHEI AI Legal Assistant Setup                   ║"
    echo "║                                                              ║"
    echo "║    Deploy your Word add-in to AWS in under 10 minutes!      ║"
    echo "║                                                              ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo ""
}

check_project_structure() {
    log_header "Checking project structure..."
    
    # Check if we're in the right directory
    if [ ! -f "package.json" ] || [ ! -d "terraform" ] || [ ! -f "deploy.sh" ]; then
        log_error "This doesn't appear to be the RHEI Word Add-in project directory."
        log_info "Please run this script from the project root directory."
        exit 1
    fi
    
    log_success "Project structure verified!"
}

run_aws_setup() {
    log_header "Setting up AWS tools and credentials..."
    
    if [ -f "scripts/setup-aws.sh" ]; then
        ./scripts/setup-aws.sh
    else
        log_error "AWS setup script not found. Please ensure scripts/setup-aws.sh exists."
        exit 1
    fi
}

install_node_dependencies() {
    log_header "Installing Node.js dependencies..."
    
    if [ ! -d "node_modules" ]; then
        log_info "Installing npm dependencies..."
        npm install
        log_success "Dependencies installed!"
    else
        log_info "Dependencies already installed. Checking for updates..."
        npm update
        log_success "Dependencies updated!"
    fi
}

build_application() {
    log_header "Building the Word add-in application..."
    
    log_info "Building for production..."
    npm run build
    
    if [ ! -d "dist" ]; then
        log_error "Build failed - dist directory not found"
        exit 1
    fi
    
    log_success "Application built successfully!"
}

show_deployment_options() {
    echo ""
    log_header "Choose your deployment option:"
    echo ""
    echo "1. Frontend Only (Recommended for first deployment)"
    echo "   - S3 + CloudFront hosting"
    echo "   - Cost: ~\$2-15/month"
    echo "   - Perfect for most users"
    echo ""
    echo "2. Frontend + Custom Domain"
    echo "   - Includes Route53 DNS management"
    echo "   - Cost: ~\$3-16/month"
    echo "   - Professional custom URL"
    echo ""
    echo "3. Full Stack (Advanced)"
    echo "   - Includes backend API and database"
    echo "   - Cost: ~\$100-250/month"
    echo "   - Complete enterprise solution"
    echo ""
    echo "4. Custom Configuration"
    echo "   - Edit terraform.tfvars manually"
    echo "   - Full control over all settings"
    echo ""
    
    read -p "Select option (1-4): " -n 1 -r
    echo ""
    
    case $REPLY in
        1)
            configure_frontend_only
            ;;
        2)
            configure_with_domain
            ;;
        3)
            configure_full_stack
            ;;
        4)
            configure_custom
            ;;
        *)
            log_warning "Invalid option. Using frontend-only configuration."
            configure_frontend_only
            ;;
    esac
}

configure_frontend_only() {
    log_info "Configuring frontend-only deployment..."
    
    cat > terraform/terraform.tfvars << EOF
# RHEI Word Add-in Configuration - Frontend Only
# Generated by setup.sh on $(date)

aws_region = "$(aws configure get region || echo 'us-east-1')"
project_name = "rhei-word-addin"
environment = "prod"
owner = "$(whoami)"

# Frontend Only
enable_backend = false
enable_database = false
enable_custom_domain = false

# Monitoring and Security
enable_monitoring = true
log_retention_days = 30
enable_deletion_protection = true

# Cost Optimization
cloudfront_price_class = "PriceClass_100"
EOF
    
    log_success "Frontend-only configuration created!"
}

configure_with_domain() {
    log_info "Configuring deployment with custom domain..."
    
    echo ""
    read -p "Enter your domain name (e.g., word-addin.yourcompany.com): " DOMAIN_NAME
    
    if [ -z "$DOMAIN_NAME" ]; then
        log_warning "No domain provided. Using frontend-only configuration."
        configure_frontend_only
        return
    fi
    
    cat > terraform/terraform.tfvars << EOF
# RHEI Word Add-in Configuration - With Custom Domain
# Generated by setup.sh on $(date)

aws_region = "$(aws configure get region || echo 'us-east-1')"
project_name = "rhei-word-addin"
environment = "prod"
owner = "$(whoami)"

# Frontend with Custom Domain
enable_backend = false
enable_database = false
enable_custom_domain = true
domain_name = "$DOMAIN_NAME"

# Monitoring and Security
enable_monitoring = true
log_retention_days = 30
enable_deletion_protection = true

# Cost Optimization
cloudfront_price_class = "PriceClass_100"
EOF
    
    log_success "Custom domain configuration created!"
    log_warning "Remember to update your domain's nameservers after deployment!"
}

configure_full_stack() {
    log_info "Configuring full-stack deployment..."
    
    echo ""
    read -p "Enter your main domain (e.g., word-addin.yourcompany.com): " DOMAIN_NAME
    read -p "Enter your API domain (e.g., api.word-addin.yourcompany.com): " API_DOMAIN
    
    cat > terraform/terraform.tfvars << EOF
# RHEI Word Add-in Configuration - Full Stack
# Generated by setup.sh on $(date)

aws_region = "$(aws configure get region || echo 'us-east-1')"
project_name = "rhei-word-addin"
environment = "prod"
owner = "$(whoami)"

# Full Stack Configuration
enable_backend = true
enable_database = true
enable_custom_domain = $([ -n "$DOMAIN_NAME" ] && echo "true" || echo "false")
$([ -n "$DOMAIN_NAME" ] && echo "domain_name = \"$DOMAIN_NAME\"")
$([ -n "$API_DOMAIN" ] && echo "api_domain = \"$API_DOMAIN\"")

# Backend Sizing
ecs_cpu = 256
ecs_memory = 512
ecs_desired_count = 1

# Database Configuration
db_instance_class = "db.t3.micro"
db_allocated_storage = 20

# Monitoring and Security
enable_monitoring = true
log_retention_days = 30
enable_deletion_protection = true

# Performance
cloudfront_price_class = "PriceClass_200"
EOF
    
    log_success "Full-stack configuration created!"
    log_warning "Full-stack deployment costs ~\$100-250/month"
}

configure_custom() {
    log_info "Opening terraform.tfvars for custom configuration..."
    
    # Copy example if it doesn't exist
    if [ ! -f "terraform/terraform.tfvars" ]; then
        cp terraform/terraform.tfvars.example terraform/terraform.tfvars
    fi
    
    # Try to open with common editors
    if command -v code &> /dev/null; then
        code terraform/terraform.tfvars
    elif command -v nano &> /dev/null; then
        nano terraform/terraform.tfvars
    elif command -v vim &> /dev/null; then
        vim terraform/terraform.tfvars
    else
        log_info "Please edit terraform/terraform.tfvars manually"
    fi
    
    echo ""
    read -p "Press Enter when you've finished editing terraform.tfvars..."
}

deploy_to_aws() {
    log_header "Deploying to AWS..."
    
    echo ""
    log_warning "This will create AWS resources and may incur costs."
    log_info "Estimated monthly cost based on your configuration:"
    
    # Show estimated cost based on configuration
    if grep -q "enable_backend = true" terraform/terraform.tfvars; then
        echo "  Full Stack: ~\$100-250/month"
    elif grep -q "enable_custom_domain = true" terraform/terraform.tfvars; then
        echo "  Frontend + Domain: ~\$3-16/month"
    else
        echo "  Frontend Only: ~\$2-15/month"
    fi
    
    echo ""
    read -p "Do you want to proceed with deployment? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Deployment cancelled. You can deploy later with: ./deploy.sh"
        return
    fi
    
    # Run the deployment
    ./deploy.sh
}

show_completion_summary() {
    echo ""
    echo "╔══════════════════════════════════════════════════════════════╗"
    echo "║                                                              ║"
    echo "║                    🎉 SETUP COMPLETE! 🎉                     ║"
    echo "║                                                              ║"
    echo "╚══════════════════════════════════════════════════════════════╝"
    echo ""
    
    log_success "Your RHEI Word Add-in has been successfully deployed to AWS!"
    echo ""
    echo "=== NEXT STEPS ==="
    echo "1. ✅ AWS infrastructure deployed"
    echo "2. ✅ Application files uploaded"
    echo "3. ✅ Manifest.xml updated with new URLs"
    echo "4. 📋 Upload manifest.xml to Office 365 admin center"
    echo "5. 🧪 Test the add-in in Word Online"
    echo ""
    echo "=== USEFUL COMMANDS ==="
    echo "• Update application: ./deploy.sh --skip-terraform"
    echo "• Update manifest: ./scripts/update-manifest.sh"
    echo "• View AWS resources: cd terraform && terraform show"
    echo "• Destroy infrastructure: ./destroy.sh"
    echo ""
    echo "=== DOCUMENTATION ==="
    echo "• Quick Start: QUICK-START.md"
    echo "• Full Guide: README.md"
    echo "• AWS Details: README-AWS-DEPLOYMENT.md"
    echo ""
    echo "🚀 Your Word add-in is now running on enterprise-grade AWS infrastructure!"
}

# Main function
main() {
    show_banner
    
    # Parse command line arguments
    SKIP_DEPLOY=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --skip-deploy)
                SKIP_DEPLOY=true
                shift
                ;;
            --help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  --skip-deploy    Set up tools and configuration but don't deploy"
                echo "  --help           Show this help message"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Run setup steps
    check_project_structure
    run_aws_setup
    install_node_dependencies
    build_application
    show_deployment_options
    
    if [ "$SKIP_DEPLOY" = false ]; then
        deploy_to_aws
        show_completion_summary
    else
        echo ""
        log_info "Setup completed. Run './deploy.sh' when ready to deploy."
    fi
}

# Run main function
main "$@"
