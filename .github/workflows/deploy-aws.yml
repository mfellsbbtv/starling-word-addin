name: Deploy RHEI Word Add-in to AWS (DISABLED)

# DISABLED: This workflow has been disabled to prevent automatic AWS deployments
# To re-enable, replace 'workflow_call' with the original triggers

on:
  workflow_call:  # This prevents automatic triggering

# Original triggers (commented out):
# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]
#   workflow_dispatch:
#     inputs:
#       environment:
#         description: 'Environment to deploy to'
#         required: true
#         default: 'staging'
#         type: choice
#         options:
#           - staging
#           - prod

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting not configured"

      - name: Run tests
        run: npm test || echo "Tests not configured"

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Plan Terraform changes
  terraform-plan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create terraform.tfvars
        working-directory: terraform
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          project_name = "rhei-word-addin"
          environment = "staging"
          enable_backend = false
          enable_database = false
          enable_custom_domain = false
          enable_monitoring = true
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -no-color
        continue-on-error: true

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Create terraform.tfvars for staging
        working-directory: terraform
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          project_name = "rhei-word-addin"
          environment = "staging"
          enable_backend = false
          enable_database = false
          enable_custom_domain = false
          enable_monitoring = true
          enable_deletion_protection = false
          EOF

      - name: Deploy infrastructure
        working-directory: terraform
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Deploy application to S3
        working-directory: terraform
        run: |
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          
          # Upload files to S3
          aws s3 sync ../dist/ s3://$S3_BUCKET/ --delete --cache-control "max-age=31536000" --exclude "*.html" --exclude "*.xml"
          aws s3 sync ../dist/ s3://$S3_BUCKET/ --delete --cache-control "no-cache" --include "*.html" --include "*.xml"
          
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: Output deployment URLs
        working-directory: terraform
        run: |
          echo "ğŸš€ Staging deployment completed!"
          echo "Word Add-in URL: $(terraform output -raw word_addin_url)"
          echo "Manifest URLs:"
          terraform output -json manifest_urls | jq -r 'to_entries[] | "\(.key): \(.value)"'

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/

      - name: Create terraform.tfvars for production
        working-directory: terraform
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ env.AWS_REGION }}"
          project_name = "rhei-word-addin"
          environment = "prod"
          enable_backend = ${{ secrets.ENABLE_BACKEND || 'false' }}
          enable_database = ${{ secrets.ENABLE_DATABASE || 'false' }}
          enable_custom_domain = ${{ secrets.ENABLE_CUSTOM_DOMAIN || 'false' }}
          domain_name = "${{ secrets.DOMAIN_NAME || '' }}"
          enable_monitoring = true
          enable_deletion_protection = true
          cloudfront_price_class = "PriceClass_200"
          EOF

      - name: Deploy infrastructure
        working-directory: terraform
        run: |
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Deploy application to S3
        working-directory: terraform
        run: |
          S3_BUCKET=$(terraform output -raw s3_bucket_name)
          DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)
          
          # Upload files to S3
          aws s3 sync ../dist/ s3://$S3_BUCKET/ --delete --cache-control "max-age=31536000" --exclude "*.html" --exclude "*.xml"
          aws s3 sync ../dist/ s3://$S3_BUCKET/ --delete --cache-control "no-cache" --include "*.html" --include "*.xml"
          
          # Invalidate CloudFront cache
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

      - name: Output deployment URLs
        working-directory: terraform
        run: |
          echo "ğŸš€ Production deployment completed!"
          echo "Word Add-in URL: $(terraform output -raw word_addin_url)"
          echo "Manifest URLs:"
          terraform output -json manifest_urls | jq -r 'to_entries[] | "\(.key): \(.value)"'

      - name: Create GitHub release
        if: success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release v${{ github.run_number }}
          body: |
            ğŸš€ Production deployment completed successfully!
            
            **Deployment Details:**
            - Environment: Production
            - Commit: ${{ github.sha }}
            - Deployed by: ${{ github.actor }}
            
            **URLs:**
            - Word Add-in: $(terraform output -raw word_addin_url)
          draft: false
          prerelease: false
